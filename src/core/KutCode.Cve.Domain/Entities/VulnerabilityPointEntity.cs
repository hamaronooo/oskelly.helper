using System.ComponentModel;
using System.ComponentModel.DataAnnotations.Schema;
using KutCode.Cve.Domain.Entities.Base;

namespace KutCode.Cve.Domain.Entities;

/// <summary>
/// Point of CVE activity in computer system - is a combination of software and platform.
/// In some cases one of them (soft or platform) may be not presented.
/// </summary>
[Table("vulnerability_point")]
public sealed class VulnerabilityPointEntity : ModelWithId<Guid>
{
	public VulnerabilityPointEntity() { }
	public VulnerabilityPointEntity(Guid uid, Guid? softId, Guid? platformId) : base(uid)
	{
		if (softId is null && platformId is null)
			throw new ArgumentException("Either platform or software must be presented");
		SoftwareId = softId;
		PlatformId = platformId;
	}

	/// <summary>
	/// Data source code, aka finder code 
	/// </summary>
	[Column("data_source_code")]
	public string DataSourceCode { get; set; }
	
	[Column("short_name")]
	public string? ShortName { get; set; }
	[Column("description")]
	public string? Description { get; set; }
	[Description("Potintial corruption of system")]
	[Column("impact")]
	public string? Impact { get; set; }
	
	[Column("platform_id")]
	public Guid? PlatformId { get; set; }
	[Description("PlatformEntity where this CVE is active")]
	public PlatformEntity? Platform { get; set; }
	
	[Column("software_id")]
	public Guid? SoftwareId { get; set; }
	[Description("SoftwareEntity which can be corrupted by this CVE")]
	public SoftwareEntity? Software { get; set; }

	[Column("cve_year")]
	public int CveYear { get; set; }
	[Column("cve_cna_number")]
	public string CveCnaNumber { get; set; }
	public CveId CveId => new(CveYear, CveCnaNumber);
	public CveEntity Cve { get; set; }

	public ICollection<CveSolutionEntity> CveSolutions { get; set; } = new List<CveSolutionEntity>();
}